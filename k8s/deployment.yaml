apiVersion: apps/v1
kind: Deployment
metadata:
  name: vllm-mistral-7b
  namespace: vllm
  labels:
    app: vllm
    model: mistral-7b-awq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vllm
      model: mistral-7b-awq
  template:
    metadata:
      labels:
        app: vllm
        model: mistral-7b-awq
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      # Node selector for T4 GPU nodes
      nodeSelector:
        nvidia.com/gpu.product: "Tesla-T4"

      # Tolerations for GPU nodes
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

      containers:
      - name: vllm
        image: vllm-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP

        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: vllm-config

        # Additional environment variables
        env:
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: "compute,utility"

        # Resource limits and requests
        resources:
          requests:
            memory: "24Gi"
            cpu: "4"
            nvidia.com/gpu: 1
          limits:
            memory: "32Gi"
            cpu: "8"
            nvidia.com/gpu: 1

        # Volume mounts
        volumeMounts:
        - name: model-cache
          mountPath: /root/.cache/huggingface
        - name: shm
          mountPath: /dev/shm

        # Startup probe - allows slow initial startup
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60  # Give time for container init
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 40  # Allow up to 10 minutes for startup (60s + 40*15s)
          successThreshold: 1

        # Liveness probe - checks if service is alive
        livenessProbe:
          httpGet:
            path: /health
            port: http
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1

        # Readiness probe - checks if model is loaded and ready
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5  # Start checking soon after startup probe succeeds
          periodSeconds: 15
          timeoutSeconds: 10
          successThreshold: 2  # Require 2 consecutive successes
          failureThreshold: 5  # More tolerance during operation

        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL

      # Volumes
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: vllm-model-cache
      - name: shm
        emptyDir:
          medium: Memory
          sizeLimit: 8Gi

      # Service account
      serviceAccountName: vllm-sa

      # Pod security context
      securityContext:
        fsGroup: 1000
        supplementalGroups:
        - 1000
