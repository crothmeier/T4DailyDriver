name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION_DEFAULT: "3.11"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: Lint Python with ruff
        run: ruff check . --output-format=github

      - name: Check Python formatting with black
        run: black --check .

      - name: Check import sorting with isort
        run: isort --check-only .

      - name: Lint Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'constraints-cu121-py310.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --index-url https://download.pytorch.org/whl/cu121 torch==2.3.1 torchvision==0.18.1
          PIP_CONSTRAINT=constraints-cu121-py310.txt python -m pip install -r requirements.txt
          pip install safety

      - name: Run safety check
        run: |
          safety check --json

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'constraints-cu121-py310.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --index-url https://download.pytorch.org/whl/cu121 torch==2.3.1 torchvision==0.18.1
          PIP_CONSTRAINT=constraints-cu121-py310.txt python -m pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Docker Image (${{ matrix.variant }})
    runs-on: ubuntu-latest
    needs: [lint, security]
    strategy:
      matrix:
        include:
          # Legacy stack (current production)
          - variant: "cu121-pt231-vllm053"
            cuda-version: "12.1.0"
            dockerfile: "Dockerfile"
            tag-suffix: "legacy"
          # New CUDA 12.4 stack
          - variant: "cu124-pt251-vllm09"
            cuda-version: "12.4.1"
            dockerfile: "Dockerfile.cuda124"
            tag-suffix: "cuda124"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-${{ matrix.variant }},onlatest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.variant }}-{{date 'YYYYMMDD'}}-{{sha}}
            type=raw,value=${{ matrix.tag-suffix }}-latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.variant=${{ matrix.variant }}
            deployment.strategy=blue-green
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CUDA_VERSION=${{ matrix.cuda-version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Run Trivy vulnerability scanner on image
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'constraints-cu121-py310.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --index-url https://download.pytorch.org/whl/cu121 torch==2.3.1 torchvision==0.18.1
          PIP_CONSTRAINT=constraints-cu121-py310.txt python -m pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start service container
        run: |
          docker run -d \
            --name vllm-test \
            -p 8080:8080 \
            -e MODEL_NAME=mistralai/Mistral-7B-v0.1 \
            -e QUANTIZATION=awq \
            -e MAX_MODEL_LEN=4096 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cu121-pt231-vllm053-${{ github.sha }}

      - name: Wait for service to be ready
        run: |
          for i in {1..180}; do
            if curl -f http://localhost:8080/ready; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service... ($i/180)"
            sleep 5
          done

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v

      - name: Stop service container
        if: always()
        run: docker stop vllm-test && docker rm vllm-test

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Artillery
        run: |
          npm install -g artillery@latest
          npm install -g artillery-plugin-metrics-by-endpoint

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start service container
        run: |
          docker run -d \
            --name vllm-load-test \
            -p 8080:8080 \
            -e MODEL_NAME=mistralai/Mistral-7B-v0.1 \
            -e QUANTIZATION=awq \
            -e MAX_MODEL_LEN=4096 \
            --gpus all \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cu121-pt231-vllm053-${{ github.sha }}

      - name: Wait for service to be ready
        run: |
          for i in {1..180}; do
            if curl -f http://localhost:8080/ready; then
              echo "Service is ready"
              break
            fi
            echo "Waiting for service... ($i/180)"
            sleep 5
          done

      - name: Run load tests
        run: |
          artillery run tests/load/artillery.yml --output report.json

      - name: Generate HTML report
        run: |
          artillery report report.json --output report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            report.json
            report.html

      - name: Stop service container
        if: always()
        run: docker stop vllm-load-test && docker rm vllm-load-test

  canary-validation:
    name: Canary Validation
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          pip install httpx numpy matplotlib

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start both services for comparison
        run: |
          # Start legacy service
          docker run -d \
            --name vllm-legacy \
            -p 8080:8080 \
            -e MODEL_NAME=mistralai/Mistral-7B-v0.1 \
            -e QUANTIZATION=awq \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cu121-pt231-vllm053-${{ github.sha }}

          # Start CUDA 12.4 service
          docker run -d \
            --name vllm-cuda124 \
            -p 8081:8080 \
            -e MODEL_NAME=mistralai/Mistral-7B-v0.1 \
            -e QUANTIZATION=awq \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cu124-pt251-vllm09-${{ github.sha }}

      - name: Wait for services to be ready
        run: |
          for service in "8080" "8081"; do
            echo "Waiting for service on port $service..."
            for i in {1..180}; do
              if curl -f http://localhost:$service/ready; then
                echo "Service on port $service is ready"
                break
              fi
              sleep 5
            done
          done

      - name: Run comparison benchmark
        run: |
          python scripts/benchmark_comparison.sh \
            --legacy-url http://localhost:8080 \
            --cuda124-url http://localhost:8081 \
            --output benchmarks/canary-results.json

      - name: Validate performance metrics
        run: |
          python scripts/validate_canary_metrics.py \
            --results benchmarks/canary-results.json \
            --ttft-threshold 0.05 \
            --memory-threshold 0.10

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: canary-validation-results
          path: benchmarks/

      - name: Stop service containers
        if: always()
        run: |
          docker stop vllm-legacy vllm-cuda124 || true
          docker rm vllm-legacy vllm-cuda124 || true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          echo "# Release ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Docker Images" >> RELEASE_NOTES.md
          echo "- Legacy (CUDA 12.1): \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-cu121-pt231-vllm053\`" >> RELEASE_NOTES.md
          echo "- CUDA 12.4: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-cu124-pt251-vllm09\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          generate_release_notes: true
