name: CI/CD Pipeline - T4 Optimized

on:
  push:
    branches: [main, develop, feature/t4-sdpa-only]
    tags:
      - 'v*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION_DEFAULT: "3.10"

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: Lint Python with ruff
        run: ruff check . --output-format=github

      - name: Check Python formatting with black
        run: black --check .

      - name: Check import sorting with isort
        run: isort --check-only .

      - name: Lint Dockerfile with hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]  # Focus on T4-compatible Python version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies (T4-optimized)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --index-url https://download.pytorch.org/whl/cu124 torch==2.5.1+cu124
          pip install -r requirements-cuda124.txt -c constraints-cuda124.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Verify SDPA backend configuration
        run: |
          python -c "
          import os
          backend = os.getenv('VLLM_ATTENTION_BACKEND', 'AUTO')
          assert backend == 'SDPA' or backend == 'AUTO', f'Expected SDPA backend, got {backend}'
          print('✓ SDPA backend configuration verified')
          "

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term

  build-t4:
    name: Build T4-Optimized Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for T4 build
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-t4-cuda124,onlatest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=t4-cuda124-{{date 'YYYYMMDD'}}-{{sha}}

      - name: Build and push T4-optimized Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VLLM_ATTENTION_BACKEND=SDPA
            CUDA_VERSION=12.4.0
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Validate T4 optimizations in image
        if: github.event_name != 'pull_request'
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:t4-cuda124-${{ github.sha }} \
            python -c "
          import os
          backend = os.getenv('VLLM_ATTENTION_BACKEND')
          assert backend == 'SDPA', f'Expected SDPA backend, got {backend}'
          print('✓ T4 SDPA configuration verified in image')
          "

  integration-tests-t4:
    name: T4-Specific Integration Tests
    runs-on: ubuntu-latest
    needs: [build-t4]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx

      - name: Start T4-optimized service container
        run: |
          docker run -d \
            --name vllm-t4-test \
            -p 8080:8080 \
            -e VLLM_ATTENTION_BACKEND=SDPA \
            -e MODEL_NAME=mistralai/Mistral-7B-v0.1 \
            -e QUANTIZATION=awq \
            -e MAX_MODEL_LEN=4096 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:t4-cuda124-${{ github.sha }}

      - name: Wait for T4 service to be ready
        run: |
          for i in {1..120}; do
            if curl -f http://localhost:8080/ready; then
              echo "T4 service is ready"
              break
            fi
            echo "Waiting for T4 service... ($i/120)"
            sleep 5
          done

      - name: Run T4-specific integration tests
        run: |
          # Verify SDPA backend is being used
          curl -s http://localhost:8080/health | jq '.model_loaded'

          # Test generation with T4 configuration
          curl -X POST http://localhost:8080/generate \
            -H "Content-Type: application/json" \
            -d '{"prompt": "Hello T4 GPU", "max_tokens": 10, "temperature": 0.1}' \
            | jq '.text'

      - name: Stop T4 service container
        if: always()
        run: docker stop vllm-t4-test && docker rm vllm-t4-test

  release:
    name: Create T4-Optimized Release
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests-t4, build-t4]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate T4 changelog
        id: changelog
        run: |
          echo "# Release ${{ github.ref_name }} - T4 Optimized" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## T4-Optimized Docker Images" >> RELEASE_NOTES.md
          echo "- Tesla T4 CUDA 12.4: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-t4-cuda124\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## T4 Optimizations" >> RELEASE_NOTES.md
          echo "- ✅ SDPA attention backend (FlashAttention-2 removed)" >> RELEASE_NOTES.md
          echo "- ✅ CUDA 12.4 optimized for Tesla T4 SM75 architecture" >> RELEASE_NOTES.md
          echo "- ✅ Memory utilization optimized for 16GB T4 VRAM" >> RELEASE_NOTES.md
          echo "- ✅ AWQ quantization for Mistral-7B on T4" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md

      - name: Create T4-Optimized Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
          generate_release_notes: true
